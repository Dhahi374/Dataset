from mininet.topo import Topo
from mininet.util import irange,dumpNodeConnections
from mininet.net import Mininet
from mininet.node import CPULimitedHost
from mininet.link import TCLink
from mininet.util import dumpNodeConnections
from mininet.log import setLogLevel
from mininet.cli import CLI
import time
import re
global totalHost
global totalSwitch
global hostPerSwitch
hostPerSwitch=16
totalSwitch=3
totalHost=totalSwitch*hostPerSwitch

linkopts = dict(bw=1000, delay='0ms', loss=0, max_queue_size=2, use_htb=True,jitter=0,max_latency=0)
class LinearTopo(Topo):
    "Linear topology of k switches, with n hosts per switch."
    def __init__(self, k=2, n=2, **opts):
        """Init.
           k: number of switches
           n: number of hosts per switch
           hconf: host configuration options
           lconf: link configuration options"""

        super(LinearTopo, self).__init__(**opts)

        self.k = k
        self.n = n

        if n == 1:
            genHostName = lambda i, j: 'h%s' % i
        else:
            genHostName = lambda i, j: 'h%ss%d' % (j, i)

        lastSwitch = None
        for i in irange(1, k):
            # Add switch
            switch = self.addSwitch('s%s' % i)
            # Add hosts to switch
            for j in irange(1, n):
                host = self.addHost(genHostName(i, j),cpu=100/totalHost)
                self.addLink(host, switch, **linkopts)

            # Connect switch to previous
            if lastSwitch:
                self.addLink(switch, lastSwitch, **linkopts)
            lastSwitch = switch

def getTime( strval):
    time = 0
    r=r'Time taken for tests:   ([\d.]+)'
    m=re.findall(r,strval)
    if len(m) >0:
        time = m[0]
    else:
        pass
    return time

def perfTest():
    "Create network and run simple performance test"
    topo = LinearTopo(k=totalSwitch,n=hostPerSwitch)
    net = Mininet( topo=topo,
                   host=CPULimitedHost, link=TCLink,
                   autoStaticArp=True )
    net.start()
    
    net.pingAll()
    maxServer = 32

    maxClient=totalHost - maxServer

    indx=0
    cmd='python -m SimpleHTTPServer 80&'

    hosts = net.hosts
    servers=[]
    clients=[]
    for host in hosts:
        if indx < maxServer:
            servers.append(host)
            host.cmd( cmd)
        else :
           clients.append(host)
        indx+=1

    time.sleep(2)
    indx=0
    for srv in servers:
        cmd = "ab  -n 1000 -c 5 http://{}/".format(srv.IP())
        out =  clients[0].cmd(cmd)
        indx+=1
        print "Server # ", indx, " Time taken for test ",  getTime(out)
    
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    perfTest()
